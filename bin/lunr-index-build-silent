#!/usr/local/bin/node

var lunr = require('lunr'),
    minimist = require('minimist'),
    ProgressBar = require('progress')

var argv = require('minimist')(process.argv.slice(2));


process.stdout.write(JSON.stringify(argv));

//lunr-index-build-silent --with-progressbar -r id -f title:10 -f body < data.json > index.json'

var arrayWrap = function (obj) {
    if (Array.isArray(obj)) return obj
    if (obj === undefined || obj === null) return []
    return [obj]
}

var idx = lunr(function () {
    if (argv.r) this.ref(argv.r)

    arrayWrap(argv.f).forEach(function (fieldString) {
        var fieldParts = fieldString.split(':'),
            fieldName = fieldParts[0],
            fieldBoost = fieldParts[1] ? parseInt(fieldParts[1], 10) : 1

        this.field(fieldName, {boost: fieldBoost})
    }, this)
})

var inputBuffer = ''

process.stdin.resume()
process.stdin.setEncoding('utf8')

process.stdin.on('data', function (chunk) {
    inputBuffer = inputBuffer.concat(chunk)
})

process.stdin.on('end', function () {
    try {
        var documents = JSON.parse(inputBuffer)
    } catch (e) {
        console.error('invalid input JSON')
        process.exit(1)
    }

    if (argv["with-progressbar"]) {
        var bar = new ProgressBar('  indexing [:bar] :percent :etas', {
            total: documents.length,
            width: 20,
            complete: '=',
            incomplete: ' ',
            stream: process.stderr
        })
    }

    documents.forEach(function (document) {
        idx.add(document);
        if (argv["with-progressbar"]) {
            bar.tick(1)
        }
    })

    process.stdout.write(JSON.stringify(idx))
    if (argv["with-progressbar"]) {
        process.stderr.write('\n')
    }
    process.exit(0)
})
